# Pipeline para GitLab
# Este pipeline se ejecuta automáticamente en cada push y merge request

# Definir las etapas en orden de ejecución
stages:
  - test
  - build
  - quality

# Caché de dependencias de Rust para acelerar las compilaciones.
# Sino es un calvario.
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - target/
    - .cargo/

# Variables para la herramienta de Rust.
variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"
  RUST_VERSION: "1.89.0"

# Etapa de test - ejecuta todos los tests.
test:
  stage: test
  image: rust:1.89.0-slim
  tags:
    - rust
    - docker
    - linux
  before_script:
    - rustc --version
    - cargo --version
  script:
    - cargo test --verbose
    - cargo test --verbose --release
  coverage: '/All tests passed/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - target/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH

# Etapa de build - crea la build de release.
build:
  stage: build
  image: rust:1.89.0-slim
  tags:
    - rust
    - docker
    - linux
    - build
  before_script:
    - rustc --version
    - cargo --version
  script:
    - cargo build --release
    - cargo check --release
  artifacts:
    paths:
      - target/release/
    expire_in: 1 month
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Etapa de calidad - ejecuta las comprobaciones de calidad.
quality:
  stage: quality
  image: rust:1.89.0-slim
  tags:
    - rust
    - docker
    - linux
    - quality
  before_script:
    - rustc --version
    - cargo --version
    - rustup component add clippy
    - rustup component add rustfmt
  script:
    - cargo fmt -- --check
    - cargo clippy -- -D warnings
    - cargo check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

