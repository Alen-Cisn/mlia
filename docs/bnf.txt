whitespace ::= " " | "\t" | NL

decimal_digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

integer_literal ::= [-] decimal_digit {decimal_digit}
# boolean_literal ::= "true" | "false"

# Comentarios (léxicos, pueden aparecer entre tokens y ser ignorados)
comment ::= "(*" { any_char_except_comment_end | NL } "*)"

lowercase_letter ::= a-z
    | U+00DF - U+00F6
    | U+00F8 - U+00FF
    | U+0153 - U+0161
    | U+017E

uppercase_letter ::= A-Z
    | U+00C0 - U+00D6
    | U+00D8 - U+00DE
    | U+0152 - U+0160
    | U+017D - U+0178
    | U+1E9E

letter	::=	uppercase_letter
    | lowercase_letter

symbol_char ::= "!" | "$" | "%" | "&" | "*" | "+" | "-" | "/"
    | ":" | "<" | "=" | ">" | "?" | "@" | "\\" | "^" | "|" | "~"

identifier	::=	( letter | "_" | symbol_char ) { letter | decimal_digit | "_" | symbol_char }

reserved_word ::= "decl" | "while" | "match" | "with" | "done" | "in" | "do"
    # Los siguientes no son palabras reservadas, pero se usan como funciones "built-in",
    # por facilidad los definimos como palabras reservadas
    | "print" | "<" | ">" | "!=" | "+" | "-" | "*" | "/" | "%" | "=" | "|" | "->" | "<-"

literal ::= integer_literal

expression ::= literal
    | identifier
    | "(" expression ")"
    | expression { expression } # Aplicación de funciones
    | expression comment #
    | expression { ";" expression } # Secuencia de expresiones, se ignora el primer valor
    | identifier "<-" expression # Asignación a variable
    | { declaration "in" } expression  # Declaraciones cuyo scope es la expresión
    | "while" expression "do" expression "done" # Ciclo while
    # Match sobre literales
    | "match" expression "with"  "|" literal "->" expression { "|" literal "->" expression }


program ::= [ comment ] expression

declaration ::= "decl" identifier { parameter } "<-" expression

parameter ::= identifier
